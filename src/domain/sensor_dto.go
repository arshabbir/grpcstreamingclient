// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: dto_sensor.proto

package sensorpb

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SensorDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorId  string  `protobuf:"bytes,1,opt,name=sensorId,proto3" json:"sensorId,omitempty"`
	RequestId string  `protobuf:"bytes,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Reading   float32 `protobuf:"fixed32,3,opt,name=reading,proto3" json:"reading,omitempty"`
	Status    int32   `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SensorDataRequest) Reset() {
	*x = SensorDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dto_sensor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorDataRequest) ProtoMessage() {}

func (x *SensorDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dto_sensor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorDataRequest.ProtoReflect.Descriptor instead.
func (*SensorDataRequest) Descriptor() ([]byte, []int) {
	return file_dto_sensor_proto_rawDescGZIP(), []int{0}
}

func (x *SensorDataRequest) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *SensorDataRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SensorDataRequest) GetReading() float32 {
	if x != nil {
		return x.Reading
	}
	return 0
}

func (x *SensorDataRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type SensorDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorId  string `protobuf:"bytes,1,opt,name=sensorId,proto3" json:"sensorId,omitempty"`
	RequestId string `protobuf:"bytes,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Status    int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SensorDataResponse) Reset() {
	*x = SensorDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dto_sensor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorDataResponse) ProtoMessage() {}

func (x *SensorDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dto_sensor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorDataResponse.ProtoReflect.Descriptor instead.
func (*SensorDataResponse) Descriptor() ([]byte, []int) {
	return file_dto_sensor_proto_rawDescGZIP(), []int{1}
}

func (x *SensorDataResponse) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *SensorDataResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SensorDataResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

var File_dto_sensor_proto protoreflect.FileDescriptor

var file_dto_sensor_proto_rawDesc = []byte{
	0x0a, 0x10, 0x64, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x70, 0x62, 0x22, 0x7f, 0x0a, 0x11,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x66, 0x0a,
	0x12, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x5d, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50,
	0x75, 0x73, 0x68, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dto_sensor_proto_rawDescOnce sync.Once
	file_dto_sensor_proto_rawDescData = file_dto_sensor_proto_rawDesc
)

func file_dto_sensor_proto_rawDescGZIP() []byte {
	file_dto_sensor_proto_rawDescOnce.Do(func() {
		file_dto_sensor_proto_rawDescData = protoimpl.X.CompressGZIP(file_dto_sensor_proto_rawDescData)
	})
	return file_dto_sensor_proto_rawDescData
}

var file_dto_sensor_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_dto_sensor_proto_goTypes = []interface{}{
	(*SensorDataRequest)(nil),  // 0: sensorpb.SensorDataRequest
	(*SensorDataResponse)(nil), // 1: sensorpb.SensorDataResponse
}
var file_dto_sensor_proto_depIdxs = []int32{
	0, // 0: sensorpb.SensorServie.SensorPush:input_type -> sensorpb.SensorDataRequest
	1, // 1: sensorpb.SensorServie.SensorPush:output_type -> sensorpb.SensorDataResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_dto_sensor_proto_init() }
func file_dto_sensor_proto_init() {
	if File_dto_sensor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dto_sensor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dto_sensor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dto_sensor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dto_sensor_proto_goTypes,
		DependencyIndexes: file_dto_sensor_proto_depIdxs,
		MessageInfos:      file_dto_sensor_proto_msgTypes,
	}.Build()
	File_dto_sensor_proto = out.File
	file_dto_sensor_proto_rawDesc = nil
	file_dto_sensor_proto_goTypes = nil
	file_dto_sensor_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SensorServieClient is the client API for SensorServie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SensorServieClient interface {
	SensorPush(ctx context.Context, opts ...grpc.CallOption) (SensorServie_SensorPushClient, error)
}

type sensorServieClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorServieClient(cc grpc.ClientConnInterface) SensorServieClient {
	return &sensorServieClient{cc}
}

func (c *sensorServieClient) SensorPush(ctx context.Context, opts ...grpc.CallOption) (SensorServie_SensorPushClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SensorServie_serviceDesc.Streams[0], "/sensorpb.SensorServie/SensorPush", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensorServieSensorPushClient{stream}
	return x, nil
}

type SensorServie_SensorPushClient interface {
	Send(*SensorDataRequest) error
	Recv() (*SensorDataResponse, error)
	grpc.ClientStream
}

type sensorServieSensorPushClient struct {
	grpc.ClientStream
}

func (x *sensorServieSensorPushClient) Send(m *SensorDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sensorServieSensorPushClient) Recv() (*SensorDataResponse, error) {
	m := new(SensorDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SensorServieServer is the server API for SensorServie service.
type SensorServieServer interface {
	SensorPush(SensorServie_SensorPushServer) error
}

// UnimplementedSensorServieServer can be embedded to have forward compatible implementations.
type UnimplementedSensorServieServer struct {
}

func (*UnimplementedSensorServieServer) SensorPush(SensorServie_SensorPushServer) error {
	return status.Errorf(codes.Unimplemented, "method SensorPush not implemented")
}

func RegisterSensorServieServer(s *grpc.Server, srv SensorServieServer) {
	s.RegisterService(&_SensorServie_serviceDesc, srv)
}

func _SensorServie_SensorPush_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SensorServieServer).SensorPush(&sensorServieSensorPushServer{stream})
}

type SensorServie_SensorPushServer interface {
	Send(*SensorDataResponse) error
	Recv() (*SensorDataRequest, error)
	grpc.ServerStream
}

type sensorServieSensorPushServer struct {
	grpc.ServerStream
}

func (x *sensorServieSensorPushServer) Send(m *SensorDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sensorServieSensorPushServer) Recv() (*SensorDataRequest, error) {
	m := new(SensorDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SensorServie_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sensorpb.SensorServie",
	HandlerType: (*SensorServieServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SensorPush",
			Handler:       _SensorServie_SensorPush_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dto_sensor.proto",
}
